{
    "moduleInfo": {
        "moduleName": "IAnime",
        "moduleInitials": "IA",
        "moduleDesc": "le meilleur module pour regarder des series, animes, films, dramas et autres en vf et vostfr",
        "developer": "Danyspb4ever & Nabil",
        "moduleID": "151561516151651 ",
        "moduleImage": "https://i.postimg.cc/KvXJYvw5/cover-IAnime.png",
        "moduleVersion": 1.42,
        "moduleLenguage": "FR",
        "moduleType": "Video",
        "baseURL": "https://www.ianimes.org/index.php",
        "moduleDeveloperSite": "https://github.com/Danyspb/Modules-Ketsu/tree/main/IAnime",
        "UpdateSite": "https://raw.githubusercontent.com/Danyspb/Modules-Ketsu/main/IAnime/moduleTemplate.json",
        "preferedServer": "WATCHSB",
        "preferedDownloadServer": "DOODSTREAM",
        "blackListed": [
            ""
        ]
    },
    "global": {
        "variables": [{
            "key": "",
            "value": ""
        }],
        "cookies": [{
            "key": "",
            "value": ""
        }],
        "headers": [{
            "key": "",
            "value": ""
        }]
    },
    "mainPage": [{
            "request": {
                "url": "https://www.ianimes.org/index.php",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal6 : 'normal6', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' }; const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link,image,title,field1) { return new Data(image,title,'unknown',field1,'unknown','unknown','unknown',false,link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var donnes = []; let output = []; let emptyKeyValue = [new KeyValue('','')]; var page = [ 'Xdf789POGg45rrty','Wqs418Rtbsdfg7987ds','QQo447FFtxvxw7987','Qxc108FGkpodhjccjv','SpS891Ntpztzret87ty', 'BoR851UkN56456uui','Xod038Fbzfghfdh87df','ADs480FvP01121j','ApG097Bgtzrte787dfg','Wup331BgFuytt788o', 'Pvi726Butcvbqs45re','Vja882Gptlklgjjk','Foo00451xcv45fdtyr','CbO016Dxmipoifdg5456','Kpy369Mbvzzret7987', 'Jpr104Gol654rtetfgh','PdR780Bop78ret89z7g','Bss541Lky987ljhlgh2313s','Mvp442Srifdsg7987sdg','Nrs598Ftp87rfdxgxd8', 'Mer710Gnr132654987','Cof591Fopoiup87uipou','Qop487Rdtkmlkfgh5646aze','Jsa419Ygpazer878fdsd','Bod452VViiuher8787fd', 'Rij126Prtezrt5454sdfg' ]; var nump = page[Math.floor(Math.random() * page.length)]; var urlmodi =`https://www.ianimes.org/listing2.php?affichage=${nump}&b1u3vv0lSorJk9Lex0tbKZEtbz8RlMC9`; const rien = new ModuleRequest('', 'get', emptyKeyValue, null); var lien = new ModuleRequest('https://bilnaa.github.io/main/','get', emptyKeyValue, null); var contact = new Data(rien, 'Vous pouvez parcourir la liste des films de faÃ§on alÃ©atoire en actualisant la page acceuil .Pour faire cela, vous devez tirer du haut vers le bas la page acceuil.\\nVous pouvez ajouter des modules en cliquant sur ce texte.\\nAllez bon visionnage ðŸ˜‰.\\nDanyspb','','','','','',false,lien,false); var cherch = document.querySelectorAll('#showcase-holder .showcase .showcase-slide'); for (r of cherch){ var mg = r.querySelector('.showcase-content :nth-child(1)').style.backgroundImage.substr(5); var image = mg.split(')')[0].trim().replace('\"',''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = r.querySelector('.showcase-caption center titre6').textContent.trim(); var type = r.querySelector('.showcase-caption center:nth-child(2) titre6 font:nth-child(2)').textContent.trim(); var link = r.querySelector('.showcase-content a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); donnes.push(new Data(image, '', '',title,type,'','',false,link)); } let layout = new Layout(new Insets(0, 0, 0, 0), 1, 1, 1, 1, 0, new Size(430, 105), new Ratio('width', 6, 10), new Size(0, 0), 0, 0); let layout1 = new Layout(new Insets(0, 0, 10, 10), 1, 1, 1, 1, 0, new Size(400, 105), new Ratio('width', 4, 10), new Size(0, 0), 0, 0); output.push(new Output(CellDesings.Special3, Orientation.horizontal, DefaultLayouts.wideStrechedFull, Paging.leading,new Section('', true), layout, donnes)); output.push(new Output('CELLHelperText', Orientation.horizontal, DefaultLayouts.wideFull, Paging.centered, new Section('', true), layout1, [contact])); let MainPageObject = new MainPage(new ModuleRequest(urlmodi,'get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),new JavascriptConfig(true,false,''),output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson;"
            },
            "output": [{
                "cellDesing": "normal1",
                "orientation": "vertical",
                "defaultLayout": "wide",
                "paging": "",
                "section": {
                    "sectionName": "",
                    "separator": false
                },
                "layout": {
                    "insets": {
                        "top": 0,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                    },
                    "visibleCellsWidthS": 2,
                    "visibleCellsWidthM": 2,
                    "visibleCellsWidthL": 2,
                    "visibleCellsHeight": 2,
                    "heightForVisibleCells": 400,
                    "cellSize": {
                        "width": 300,
                        "height": 300
                    },
                    "ratio": {
                        "inRelation": "width",
                        "number1": 1,
                        "number2": 2
                    },
                    "constant": {
                        "width": 1,
                        "height": 2
                    },
                    "horizontalSpacing": 0,
                    "verticalSpacing": 0
                },
                "data": [{
                    "image": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    },
                    "title": "",
                    "description": "",
                    "field1": "",
                    "field2": "",
                    "field3": "",
                    "field4": "",
                    "openInWebView": false,
                    "isChapter": false,
                    "link": {
                        "url": "",
                        "method": "",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    }
                }]
            }]
        },
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": " const DefaultLayouts = { ultraWideFull : 'ultraWideFull', ultraWide : 'ultraWide', wideFull : 'wideFull', wide : 'wide', wideStrechedFull : 'wideStrechedFull', wideStrechedFullDouble : 'WideStrechedFullDouble', wideStreched : 'wideStreched', wideStrechedDouble : 'wideStrechedDouble', wideStrechedFullList : 'wideStrechedFullList', wideStrechedList : 'wideStrechedList', doublets : 'doublets', doubletsDouble : 'doubletsDouble', doubletsFull : 'doubletsFull', doubletsFullDouble : 'doubletsFullDouble', doubletsConstant : 'doubletsConstant', doubletsDoubleConstant : 'doubletsDoubleConstant', doubletsFullConstant : 'doubletsFullConstant', doubletsFullDoubleConstant : 'doubletsFullDoubleConstant', longDoublets : 'longDoublets', longDoubletsDouble : 'longDoubletsDouble', longDoubletsFull : 'longDoubletsFull', longDoubletsFullDouble : 'longDoubletsFullDouble', longDoubletsConstant : 'longDoubletsConstant', longDoubletsDoubleConstant : 'longDoubletsDoubleConstant', longDoubletsFullConstant : 'longDoubletsFullConstant', longDoubletsFullDoubleConstant : 'longDoubletsFullDoubleConstant', triplets : 'triplets', tripletsDouble : 'tripletsDouble', tripletsFull : 'tripletsFull', tripletsFullDouble : 'tripletsFullDouble', tripletsConstant : 'tripletsConstant', tripletsDoubleConstant : 'tripletsDoubleConstant', tripletsFullConstant : 'tripletsFullConstant', tripletsFullDoubleConstant : 'tripletsFullDoubleConstant', longTriplets : 'longTriplets', longTripletsDouble : 'longTripletsDouble', longTripletsFull : 'longTripletsFull', longTripletsFullDouble : 'longTripletsFullDouble', longTripletsConstant : 'longTripletsConstant', longTripletsDoubleConstant : 'longTripletsDoubleConstant', longTripletsFullConstant : 'longTripletsFullConstant', longTripletsFullDoubleConstant : 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1 : 'Special1', Special2 : 'Special2', Special3 : 'Special3', CELLHelperText : 'CELLHelperText', small1 : 'small1', small2 : 'small2', normal1 : 'normal1', normal2 : 'normal2', normal3 : 'normal3', normal4 : 'normal4', normal5 : 'normal5', normal6 : 'normal6', normal7 : 'normal7', wide1 : 'wide1', wide2 : 'wide2', wide3 : 'wide3', wide4 : 'wide4', wide5 : 'wide5', wide6 : 'wide6', wide7 : 'wide7', wide8 : 'wide8', wide9 : 'wide9', wide10 : 'wide10', wide11 : 'wide11' }; const Paging = { leading : 'leading', centered : 'centered', none : '' }; const Orientation = { horizontal : 'horizontal', vertical : 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS,visibleCellsWidthM,visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link,openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link,image,title,field1) { return new Data(image,title,'unknown',field1,'unknown','unknown','unknown',false,link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = parsedJson.output; let emptyKeyValue = [new KeyValue('','')]; var dat = []; var donnes = []; var rec = document.querySelectorAll('#content > div > center:nth-child(5) > table > tbody > tr > td'); for ( i = 0; i < rec.length; i++) { var dat = rec[i].querySelectorAll('table tbody'); for (don of dat){ var mg = don.querySelector('tr:nth-child(2) td center div').style.backgroundImage.substr(5); var image = mg.split(')')[0].trim().replace('\"',''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var link = don.querySelector('tr:nth-child(2) td center div a ').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); var duree = don.querySelector('tr:nth-child(3) td:nth-child(1) headline2 center font font').textContent.replace('\\n',''); var annee = don.querySelector('tr:nth-child(3) td:nth-child(2) headline2 center font font').textContent.trim(); var type = don.querySelector('tr:nth-child(3) td:nth-child(3) headline2 center font ').textContent; var title = don.querySelector('tr:nth-child(1) span').textContent.trim(); donnes.push(new Data(image, title, type,duree,annee,'','',false,link)); } } output.push(new Output(CellDesings.normal1, Orientation.horizontal, DefaultLayouts.longTripletsDouble, Paging.leading, new Section('Films', true), null, donnes)); let MainPageObject = new MainPage(new ModuleRequest('https://www.ianimes.org/series.php','get',emptyKeyValue,null),new Extra([new Commands('',emptyKeyValue)],emptyKeyValue),new JavascriptConfig(true,false,''),output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson;"
            },
            "output": [{
                "cellDesing": "normal1",
                "orientation": "vertical",
                "defaultLayout": "wide",
                "paging": "",
                "section": {
                    "sectionName": "",
                    "separator": false
                },
                "layout": {
                    "insets": {
                        "top": 0,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                    },
                    "visibleCellsWidthS": 2,
                    "visibleCellsWidthM": 2,
                    "visibleCellsWidthL": 2,
                    "visibleCellsHeight": 2,
                    "heightForVisibleCells": 400,
                    "cellSize": {
                        "width": 300,
                        "height": 300
                    },
                    "ratio": {
                        "inRelation": "width",
                        "number1": 1,
                        "number2": 2
                    },
                    "constant": {
                        "width": 1,
                        "height": 2
                    },
                    "horizontalSpacing": 0,
                    "verticalSpacing": 0
                },
                "data": [{
                    "image": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    },
                    "title": "",
                    "description": "",
                    "field1": "",
                    "field2": "",
                    "field3": "",
                    "field4": "",
                    "openInWebView": false,
                    "isChapter": false,
                    "link": {
                        "url": "",
                        "method": "",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    }
                }]
            }]
        },
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11' }; const Paging = { leading: 'leading', centered: 'centered', none: '' }; const Orientation = { horizontal: 'horizontal', vertical: 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = parsedJson.output; let emptyKeyValue = [new KeyValue('', '')]; var dat = []; var donnes = []; var rec = document.querySelectorAll('#content > div > center:nth-child(7) > table > tbody > tr > td'); for (i = 0; i < rec.length; i++) { var dat = rec[i].querySelectorAll('table tbody'); for (don of dat) { var mg = don.querySelector('tr:nth-child(2) td center div').style.backgroundImage.substr(5); var image = mg.split(')')[0].trim().replace('\"',''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = don.querySelector('tr:nth-child(1) span').textContent.trim(); var link = don.querySelector('tr:nth-child(2) td center div a ').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); var type = don.querySelector('tr:nth-child(3) td:nth-child(2) headline14 center').textContent.trim(); donnes.push(new Data(image, title, '','',type,'','',false,link)); } } output.push(new Output(CellDesings.normal1, Orientation.horizontal, DefaultLayouts.longTripletsDouble, Paging .leading, new Section('SÃ©ries', true), null, donnes)); let MainPageObject = new MainPage(new ModuleRequest('https://www.ianimes.org/top_30.php', 'get', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(true, false, ''), output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson;"
            },
            "output": [{
                "cellDesing": "normal1",
                "orientation": "vertical",
                "defaultLayout": "wide",
                "paging": "",
                "section": {
                    "sectionName": "",
                    "separator": false
                },
                "layout": {
                    "insets": {
                        "top": 0,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                    },
                    "visibleCellsWidthS": 2,
                    "visibleCellsWidthM": 2,
                    "visibleCellsWidthL": 2,
                    "visibleCellsHeight": 2,
                    "heightForVisibleCells": 400,
                    "cellSize": {
                        "width": 300,
                        "height": 300
                    },
                    "ratio": {
                        "inRelation": "width",
                        "number1": 1,
                        "number2": 2
                    },
                    "constant": {
                        "width": 1,
                        "height": 2
                    },
                    "horizontalSpacing": 0,
                    "verticalSpacing": 0
                },
                "data": [{
                    "image": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    },
                    "title": "",
                    "description": "",
                    "field1": "",
                    "field2": "",
                    "field3": "",
                    "field4": "",
                    "openInWebView": false,
                    "isChapter": false,
                    "link": {
                        "url": "",
                        "method": "",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    }
                }]
            }]
        },
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": " const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: ''};const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11'};const Paging = { leading: 'leading', centered: 'centered', none: ''};const Orientation = { horizontal: 'horizontal', vertical: 'vertical'};function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width, height) { this.width = width; this.height = height;}function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link);}function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a;}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let output = parsedJson.output;let emptyKeyValue = [new KeyValue('', '')];var dat = [];var miam = [];var check = document.querySelectorAll('#content > div > center > center ');for (i = 0; i < check.length; i++) { var dat = check[i].querySelectorAll('table tbody'); for (don of dat) { var mg = don.querySelector('tr:nth-child(2) td center div').style.backgroundImage.substr(5); var image = mg.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var title = don.querySelector('tr:nth-child(1) span').textContent.trim(); if(don.querySelector('tr:nth-child(2) td center div img').src.includes('vostfr')){ type = 'Vostfr'; }else{ type = 'VF'; } var link = don.querySelector('tr:nth-child(2) td center div a ').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); miam.push(new Data(image, '','', title, type, '', '', false, link)); } } var result = miam.reduce((unique, o) => { if(!unique.some(obj => obj.field1 === o.field1 && obj.description === o.description)) { unique.push(o); } return unique; },[]);output.push(new Output(CellDesings.wide6, Orientation.horizontal, DefaultLayouts.longDoubletsFull, Paging.none, new Section('Le top 30 Animes :', true), null, result));let MainPageObject = new MainPage(new ModuleRequest('https://www.ianimes.org/index.php', 'get', emptyKeyValue,null),new Extra([new Commands('', emptyKeyValue)], emptyKeyValue),new JavascriptConfig(true,false, ''), output);var finalJson = JSON.stringify(MainPageObject);savedData.innerHTML = finalJson;"
            },
            "output": [{
                "cellDesing": "normal1",
                "orientation": "vertical",
                "defaultLayout": "wide",
                "paging": "",
                "section": {
                    "sectionName": "",
                    "separator": false
                },
                "layout": {
                    "insets": {
                        "top": 0,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                    },
                    "visibleCellsWidthS": 2,
                    "visibleCellsWidthM": 2,
                    "visibleCellsWidthL": 2,
                    "visibleCellsHeight": 2,
                    "heightForVisibleCells": 400,
                    "cellSize": {
                        "width": 300,
                        "height": 300
                    },
                    "ratio": {
                        "inRelation": "width",
                        "number1": 1,
                        "number2": 2
                    },
                    "constant": {
                        "width": 1,
                        "height": 2
                    },
                    "horizontalSpacing": 0,
                    "verticalSpacing": 0
                },
                "data": [{
                    "image": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    },
                    "title": "",
                    "description": "",
                    "field1": "",
                    "field2": "",
                    "field3": "",
                    "field4": "",
                    "openInWebView": false,
                    "isChapter": false,
                    "link": {
                        "url": "",
                        "method": "",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    }
                }]
            }]
        },
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": "  const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11' }; const Paging = { leading: 'leading', centered: 'centered', none: '' }; const Orientation = { horizontal: 'horizontal', vertical: 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = parsedJson.output; let emptyKeyValue = [new KeyValue('', '')]; var inf= []; var grave = document.querySelectorAll('#my_poststypewidget-3 center table'); for (gr of grave) { var mg = gr.querySelector('tbody tr:nth-child(2) td center div').style.backgroundImage.substr(5); var image = mg.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); title = gr.querySelector('tbody tr:nth-child(2) td center div a').title.trim(); var link = gr.querySelector('tbody tr:nth-child(2) td center div a').href; var epis = gr.querySelector('tbody tr:nth-child(3) td:nth-child(2) headline2').textContent.trim().replaceAll('\\n',''); var type = gr.querySelector('tbody tr:nth-child(3) td:nth-child(3) headline2 font').textContent.trim(); link = new ModuleRequest(link, 'get', emptyKeyValue, null); inf.push(new Data(image, title, '',epis,type,'','',false,link)); } var result = inf.reduce((unique, o) => { if(!unique.some(obj => obj.title === o.title && obj.field2 === o.field2)) { unique.push(o); } return unique; },[]); output.push(new Output(CellDesings.normal1, Orientation.horizontal, DefaultLayouts.longTripletsDouble, Paging.leading, new Section('Animes RÃ©cemment ajoutÃ©s :', true), null, result)); let MainPageObject = new MainPage(new ModuleRequest('https://www.ianimes.org/drama.php', 'get', emptyKeyValue,null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(true,false, ''), output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson;"
            },
            "output": [{
                "cellDesing": "normal1",
                "orientation": "vertical",
                "defaultLayout": "wide",
                "paging": "",
                "section": {
                    "sectionName": "",
                    "separator": false
                },
                "layout": {
                    "insets": {
                        "top": 0,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                    },
                    "visibleCellsWidthS": 2,
                    "visibleCellsWidthM": 2,
                    "visibleCellsWidthL": 2,
                    "visibleCellsHeight": 2,
                    "heightForVisibleCells": 400,
                    "cellSize": {
                        "width": 300,
                        "height": 300
                    },
                    "ratio": {
                        "inRelation": "width",
                        "number1": 1,
                        "number2": 2
                    },
                    "constant": {
                        "width": 1,
                        "height": 2
                    },
                    "horizontalSpacing": 0,
                    "verticalSpacing": 0
                },
                "data": [{
                    "image": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    },
                    "title": "",
                    "description": "",
                    "field1": "",
                    "field2": "",
                    "field3": "",
                    "field4": "",
                    "openInWebView": false,
                    "isChapter": false,
                    "link": {
                        "url": "",
                        "method": "",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    }
                }]
            }]
        },
        {
            "request": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": " const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: '' }; const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11' }; const Paging = { leading: 'leading', centered: 'centered', none: '' }; const Orientation = { horizontal: 'horizontal', vertical: 'vertical' }; function MainPage(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data; } function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator; } function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing; } function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right; } function Size(width, height) { this.width = width; this.height = height; } function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2; } function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView; } function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link); } function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a; } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let output = parsedJson.output; let emptyKeyValue = [new KeyValue('', '')]; var inf = []; var grave = document.querySelectorAll('#content > div > center:nth-child(7) table table'); for (gr of grave) { var mg = gr.querySelector('tbody tr:nth-child(2) td center div').style.backgroundImage.substr(5); var image = mg.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); title = gr.querySelector('tbody tr:nth-child(2) td center div a').title.trim(); var link = gr.querySelector('tbody tr:nth-child(2) td center div a').href; var type = gr.querySelector('tr:nth-child(3) td:nth-child(2) headline14 center').textContent.trim(); link = new ModuleRequest(link, 'get', emptyKeyValue, null); inf.push(new Data(image, title, '', '', type, '', '', false, link)); } var result = inf.reduce((unique, o) => { if (!unique.some(obj => obj.title === o.title && obj.field2 === o.field2)) { unique.push(o); } return unique; }, []); output.push(new Output(CellDesings.normal1, Orientation.horizontal, DefaultLayouts.longTripletsDouble, Paging .leading, new Section('Drama :', true), null, result)); let MainPageObject = new MainPage(new ModuleRequest('', 'get', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(true, false, ''), output); var finalJson = JSON.stringify(MainPageObject); savedData.innerHTML = finalJson;"
            },
            "output": [{
                "cellDesing": "normal1",
                "orientation": "vertical",
                "defaultLayout": "wide",
                "paging": "",
                "section": {
                    "sectionName": "",
                    "separator": false
                },
                "layout": {
                    "insets": {
                        "top": 0,
                        "bottom": 0,
                        "left": 0,
                        "right": 0
                    },
                    "visibleCellsWidthS": 2,
                    "visibleCellsWidthM": 2,
                    "visibleCellsWidthL": 2,
                    "visibleCellsHeight": 2,
                    "heightForVisibleCells": 400,
                    "cellSize": {
                        "width": 300,
                        "height": 300
                    },
                    "ratio": {
                        "inRelation": "width",
                        "number1": 1,
                        "number2": 2
                    },
                    "constant": {
                        "width": 1,
                        "height": 2
                    },
                    "horizontalSpacing": 0,
                    "verticalSpacing": 0
                },
                "data": [{
                    "image": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    },
                    "title": "",
                    "description": "",
                    "field1": "",
                    "field2": "",
                    "field3": "",
                    "field4": "",
                    "openInWebView": false,
                    "isChapter": false,
                    "link": {
                        "url": "",
                        "method": "",
                        "headers": [{
                            "key": "",
                            "value": ""
                        }],
                        "httpBody": null
                    }
                }]
            }]
        }
 
    ],
    "search": [{
        "request": {
            "url": "https://www.ianimes.org/resultat+<searched>.html",
            "method": "get",
            "headers": [{
                "key": "",
                "value": ""
            }],
            "httpBody": null
        },
        "separator": "+",
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": " const DefaultLayouts = { ultraWideFull: 'ultraWideFull', ultraWide: 'ultraWide', wideFull: 'wideFull', wide: 'wide', wideStrechedFull: 'wideStrechedFull', wideStrechedFullDouble: 'WideStrechedFullDouble', wideStreched: 'wideStreched', wideStrechedDouble: 'wideStrechedDouble', wideStrechedFullList: 'wideStrechedFullList', wideStrechedList: 'wideStrechedList', doublets: 'doublets', doubletsDouble: 'doubletsDouble', doubletsFull: 'doubletsFull', doubletsFullDouble: 'doubletsFullDouble', doubletsConstant: 'doubletsConstant', doubletsDoubleConstant: 'doubletsDoubleConstant', doubletsFullConstant: 'doubletsFullConstant', doubletsFullDoubleConstant: 'doubletsFullDoubleConstant', longDoublets: 'longDoublets', longDoubletsDouble: 'longDoubletsDouble', longDoubletsFull: 'longDoubletsFull', longDoubletsFullDouble: 'longDoubletsFullDouble', longDoubletsConstant: 'longDoubletsConstant', longDoubletsDoubleConstant: 'longDoubletsDoubleConstant', longDoubletsFullConstant: 'longDoubletsFullConstant', longDoubletsFullDoubleConstant: 'longDoubletsFullDoubleConstant', triplets: 'triplets', tripletsDouble: 'tripletsDouble', tripletsFull: 'tripletsFull', tripletsFullDouble: 'tripletsFullDouble', tripletsConstant: 'tripletsConstant', tripletsDoubleConstant: 'tripletsDoubleConstant', tripletsFullConstant: 'tripletsFullConstant', tripletsFullDoubleConstant: 'tripletsFullDoubleConstant', longTriplets: 'longTriplets', longTripletsDouble: 'longTripletsDouble', longTripletsFull: 'longTripletsFull', longTripletsFullDouble: 'longTripletsFullDouble', longTripletsConstant: 'longTripletsConstant', longTripletsDoubleConstant: 'longTripletsDoubleConstant', longTripletsFullConstant: 'longTripletsFullConstant', longTripletsFullDoubleConstant: 'longTripletsFullDoubleConstant', none: ''};const CellDesings = { Special1: 'Special1', Special2: 'Special2', Special3: 'Special3', CELLHelperText: 'CELLHelperText', small1: 'small1', small2: 'small2', normal1: 'normal1', normal2: 'normal2', normal3: 'normal3', normal4: 'normal4', normal5: 'normal5', normal6: 'normal6', normal7: 'normal7', wide1: 'wide1', wide2: 'wide2', wide3: 'wide3', wide4: 'wide4', wide5: 'wide5', wide6: 'wide6', wide7: 'wide7', wide8: 'wide8', wide9: 'wide9', wide10: 'wide10', wide11: 'wide11'};const Paging = { leading: 'leading', centered: 'centered', none: ''};const Orientation = { horizontal: 'horizontal', vertical: 'vertical'};function Search(request, extra, separator, javascriptConfig, output) { this.request = request; this.extra = extra; this.separator = separator; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(cellDesing, orientation, defaultLayout, paging, section, layout, data) { this.cellDesing = cellDesing; this.orientation = orientation; this.defaultLayout = defaultLayout; this.paging = paging; this.section = section; this.layout = layout; this.data = data;}function Section(sectionName, separator) { this.sectionName = sectionName; this.separator = separator;}function Layout(insets, visibleCellsWidthS, visibleCellsWidthM, visibleCellsWidthL, visibleCellsHeight, heightForVisibleCells, cellSize, ratio, constant, horizontalSpacing, verticalSpacing) { this.insets = insets; this.visibleCellsWidthS = visibleCellsWidthS; this.visibleCellsWidthM = visibleCellsWidthM; this.visibleCellsWidthL = visibleCellsWidthL; this.visibleCellsHeight = visibleCellsHeight; this.heightForVisibleCells = heightForVisibleCells; this.cellSize = cellSize; this.ratio = ratio; this.constant = constant; this.horizontalSpacing = horizontalSpacing; this.verticalSpacing = verticalSpacing;}function Insets(top, bottom, left, right) { this.top = top; this.bottom = bottom; this.left = left; this.right = right;}function Size(width, height) { this.width = width; this.height = height;}function Ratio(inRelation, number1, number2) { this.inRelation = inRelation; this.number1 = number1; this.number2 = number2;}function Data(image, title, description, field1, field2, field3, field4, isChapter, link, openInWebView) { this.image = image; this.title = title; this.description = description; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.isChapter = isChapter; this.link = link; this.openInWebView = openInWebView;}function quickData(link, image, title, field1) { return new Data(image, title, 'unknown', field1, 'unknown', 'unknown', 'unknown', false, link);}function shuffle(a) { var j, x, i; for (i = a.length - 1; i > 0; i--) { j = Math.floor(Math.random() * (i + 1)); x = a[i]; a[i] = a[j]; a[j] = x; } return a;}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);let output = [];let emptyKeyValue = [new KeyValue('', '')];var donnees = [];var animes = document.querySelectorAll('td[align=\"center\"] table tbody');for (anime of animes) { var ty = anime.querySelector('a').innerText; if (ty.includes('Hentai')) { continue; } var title = anime.querySelector('titre6').innerText; var image = anime.querySelector('div').getAttribute('style'); image = image.match(/http.*(jpg|png|jpeg)/gm)[0]; image = new ModuleRequest(image, 'get', emptyKeyValue, null); var link = anime.querySelector('a').href; link = new ModuleRequest(link, 'get', emptyKeyValue, null); if (ty.includes('Film')) { type = 'Film'; } if (ty.includes('anime')) { type = 'Anime'; } if (ty.includes('Hentai')) { type = 'Hentai'; } if (ty.includes('SÃ©rie')) { type = 'Serie'; } var langue = anime.querySelectorAll('headline2')[1].innerText; var finalData = new Data(image, title, '', langue, type, 'unknown', 'unknown', false, link); donnees.push(finalData);}output.push(new Output(CellDesings.normal1, Orientation.vertical, DefaultLayouts.longTripletsFullConstant, Paging.none, new Section('', true), null, donnees));let searchPageObject = new Search(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), '', new JavascriptConfig(true, false, ''), output);var finalJson = JSON.stringify(searchPageObject);savedData.innerHTML = finalJson;"
        },
        "output": [{
            "cellDesing": "normal1",
            "orientation": "vertical",
            "defaultLayout": "wide",
            "paging": "",
            "section": {
                "sectionName": "",
                "separator": false
            },
            "layout": {
                "insets": {
                    "top": 0,
                    "bottom": 0,
                    "left": 0,
                    "right": 0
                },
                "visibleCellsWidthS": 2,
                "visibleCellsWidthM": 2,
                "visibleCellsWidthL": 2,
                "visibleCellsHeight": 2,
                "heightForVisibleCells": 400,
                "cellSize": {
                    "width": 300,
                    "height": 300
                },
                "ratio": {
                    "inRelation": "width",
                    "number1": 1,
                    "number2": 2
                },
                "constant": {
                    "width": 1,
                    "height": 2
                },
                "horizontalSpacing": 0,
                "verticalSpacing": 0
            },
            "data": [{
                "image": {
                    "url": "",
                    "method": "get",
                    "headers": [{
                        "key": "",
                        "value": ""
                    }],
                    "httpBody": null
                },
                "title": "",
                "description": "",
                "field1": "",
                "field2": "",
                "field3": "",
                "field4": "",
                "openInWebView": false,
                "isChapter": false,
                "link": {
                    "url": "empty",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }]
    }],
    "info": [{
        "request": {
            "url": "",
            "method": "get",
            "headers": [{
                "key": "",
                "value": ""
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": " function Info(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Chapter(chapName, link, openInWebView) { this.chapName = chapName; this.link = link; this.openInWebView = openInWebView; } function Output(image, title, link, description, genres, field1, field2, field3, field4, chapters) { this.image = image; this.link = link; this.title = title; this.description = description; this.genres = genres; this.field1 = field1; this.field2 = field2; this.field3 = field3; this.field4 = field4; this.chapters = chapters; } function getStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return data.replace(match, '').trim(); } } } function getHtmlStuff(array, match) { for (var x = 0; x < array.length; x++) { let data = array[x].innerText; if (data.includes(match)) { return array[x]; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); let emptyKeyValue = [new KeyValue('', '')]; var episodes = []; var status = 'Unknown'; var genres = []; var inf = []; var sort = []; var crack = []; var filt = []; var date = ''; var duree = ''; var type = ''; var desc = ''; if (parsedJson.request.url.includes('manga')) { var connais = document.querySelector('.post-wrapper center img ').src; if (connais.includes('Drama')) { var title = document.querySelector('.content-inner center').textContent.trim(); var imf = document.querySelector('.post-wrapper center div').style.backgroundImage.substr('5'); var image = imf.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); desc = 'Drama Japonais ou autres'; genres = ['Dramas', 'Japonais']; date = 'Unknown'; type = 'Vostfr'; duree = 'Unknown'; var check = document.querySelectorAll('.inner ul li a '); for (ch of check) { var epi = ch.textContent.trim(); var link = ch.href; var chapitre = new Chapter(epi, new ModuleRequest(link, 'get', emptyKeyValue, null), false); filt.push(chapitre); episodes = filt.filter(function (bon) { if (bon.chapName.includes('Episode') || (bon.chapName.includes('Oav ')) || (bon.chapName.includes('Special '))) { return episodes; } }) } } else { var title = document.querySelector('.content-inner center').textContent.trim(); var imf = document.querySelector('.post-wrapper center div').style.backgroundImage.substr('5'); var image = imf.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var test = document.querySelectorAll('fieldset'); desc = test[1].querySelector('font').textContent.replaceAll('\\n', ''); var ok = document.querySelectorAll('fieldset tbody'); inf = ok[0].querySelectorAll('td:nth-child(2) font'); for (i = 0; i < inf.length; i++) { if (inf[i].getAttribute('color') === '#4682B4') { crack.push(inf[i]); } } for (i = 0; i < crack.length; i++) { if (crack[i].textContent.includes('min')) { var duree = crack[i].textContent.trim(); } if (crack[i].textContent.includes('.')) { date = crack[i].textContent.trim(); } if (crack[i].textContent.includes(',')) { genres = crack[i].textContent.trim().split(','); } if (crack[i].textContent.includes('TV') || crack[i].textContent.includes('Tv') || crack[i].textContent .includes('-')) { var type = crack[i].textContent.trim(); } } var check = document.querySelectorAll('.inner ul li a '); for (ch of check) { var epi = ch.textContent.trim(); var link = ch.href; var chapitre = new Chapter(epi, new ModuleRequest(link, 'get', emptyKeyValue, null), false); filt.push(chapitre); episodes = filt.filter(function (bon) { if (bon.chapName.includes('Episode') || (bon.chapName.includes('Oav ')) || (bon.chapName.includes('Special ')) ) { return episodes; } }) } } } if (parsedJson.request.url.includes('serie')) { var title = document.querySelector('.content-inner center').textContent.trim(); var imf = document.querySelector('.post-wrapper center div').style.backgroundImage.substr('5'); var image = imf.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var test = document.querySelectorAll('fieldset'); var desc = test[1].querySelector('font').textContent.replaceAll('\\n', ''); var ok = document.querySelectorAll('fieldset tbody'); inf = ok[0].querySelectorAll('td:nth-child(2) font'); for (i = 0; i < inf.length; i++) { if (inf[i].getAttribute('color') === '#4682B4') { crack.push(inf[i]); } } for (i = 0; i < crack.length; i++) { if (crack[i].textContent.includes('min')) { duree = crack[i].textContent.trim(); } if (crack[i].textContent.includes('.')) { date = crack[i].textContent.trim(); } if (crack[i].textContent.includes(',')) { genres = crack[i].textContent.trim().split(','); } if (crack[i].textContent.includes('TV') || crack[i].textContent.includes('Tv')) { type = crack[i].textContent.trim(); } } var check = document.querySelectorAll('.inner ul li a '); for (ch of check) { var epi = ch.textContent.trim(); var link = ch.href; var chapitre = new Chapter(epi, new ModuleRequest(link, 'get', emptyKeyValue, null), false); filt.push(chapitre); episodes = filt.filter(function (bon) { if (bon.chapName.includes('Episode')) { return episodes; } }) } } if (parsedJson.request.url.includes('film')) { var image = ''; var title = document.querySelector('.content-inner center').textContent.trim(); var imf = document.querySelector('.post-wrapper center div').style.backgroundImage.substr('5'); image = imf.split(')')[0].trim().replace('\"', ''); image = new ModuleRequest(image, 'get', emptyKeyValue, null); var test = document.querySelectorAll('fieldset'); var desc = test[1].querySelector('font').textContent.replaceAll('\\n', ''); var ok = document.querySelectorAll('fieldset tbody'); inf = ok[0].querySelectorAll('td:nth-child(2) font'); for (i = 0; i < inf.length; i++) { if (inf[i].getAttribute('color') === '#4682B4') { crack.push(inf[i]); } } var date = ''; var duree = ''; var type = ''; for (i = 0; i < crack.length; i++) { if (crack[i].textContent.includes('/')) { duree = crack[i].textContent.trim(); } if (crack[i].textContent.includes('.') || Number.isInteger(Date.parse(crack[i].textContent.trim())) === true) { date = crack[i].textContent.trim(); } if (crack[i].textContent.includes(',')) { genres = crack[i].textContent.trim().split(','); } if (crack[i].textContent.includes('TV') || crack[i].textContent.includes('Tv')) { type = crack[i].textContent.trim(); } } var link = document.querySelector('.post-wrapper center center a').href; var chapitre = new Chapter(title, new ModuleRequest(link, 'get', emptyKeyValue, null), false); episodes.push(chapitre); } let infoPageObject = new Info(new ModuleRequest('', '', emptyKeyValue, null), new Extra([new Commands('', emptyKeyValue)], emptyKeyValue), new JavascriptConfig(false, false, ''), new Output(image, title, parsedJson.request, desc, genres, date, duree, type, 'Eps: ' + episodes.length, episodes)); var finalJson = JSON.stringify(infoPageObject); savedData.innerHTML = finalJson;"
        },
        "output": {
            "image": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "link": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "",
                    "value": ""
                }],
                "httpBody": null
            },
            "title": "",
            "description": "",
            "genres": [
                ""
            ],
            "field1": "",
            "field2": "",
            "field3": "",
            "field4": "",
            "chapters": [{
                "chapName": "",
                "openInWebView": false,
                "link": {
                    "url": "empty",
                    "method": "get",
                    "headers": [{
                        "key": "key",
                        "value": "value"
                    }],
                    "httpBody": null
                }
            }]
        }
    }],
    "chapters": [{
        "request": {
            "url": "",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": " function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(videos, images, text) { this.videos = videos; this.images = images; this.text = text;}function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;}function RawVideo(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getFile(url) { var xhr = new XMLHttpRequest(); xhr.open('post', url, false); xhr.send(); return xhr.responseText;}function Text(text) { this.text = text;}var output = [];var extraInfo = [new KeyValue('count', '1')];var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url),new KeyValue('Content-Type', 'application/x-www-form-urlencoded')];var urlencoded = new URLSearchParams();urlencoded.append('submit.x', '0');urlencoded.append('submit.y', '0');var divservers = document.querySelectorAll('#content > div > div.post-wrapper > center:nth-child(1) > div');for (var x = 1; x < divservers.length; x++) { var server = divservers[x]; if (server.className == 'spoiler' || server.className == 'spoil' || server.className == 'comic info') { continue; } var scripts = server.querySelector('p[type=\"text/javap\"]'); if (scripts.innerHTML.includes('unescape')) { var test = scripts.innerHTML.replace('document.write(', '').replace(/\\);$/gm, ''); var html = eval(test); var parser = new DOMParser(); var doc = parser.parseFromString(html, 'text/html'); var link = doc.querySelector('iframe').src; } if (x == 1) { var nextRequest = link } else { extraInfo.push(new KeyValue(`${x}`, `${link}`)); } console.log(link);}let emptyExtra = new Extra([new Commands('', emptyKeyValue)], extraInfo);var chaptersObject = new Chapters(new ModuleRequest(nextRequest, 'post', emptyKeyValue, urlencoded.toString()), emptyExtra, new JavascriptConfig(true, false, ''), new Output(new Videos(output, null), null, null));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
            "videos": {
                "needsResolver": [{
                    "resolverIdentifier": "",
                    "link": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "key",
                            "value": "value"
                        }],
                        "httpBody": null
                    }
                }],
                "rawVideo": [{
                    "video": [{
                        "videoQuality": "",
                        "videoLink": {
                            "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                            "method": "get",
                            "headers": [{
                                "key": "key",
                                "value": "value"
                            }],
                            "httpBody": null
                        }
                    }]
                }]
            },
            "images": [{
                "url": "empty",
                "method": "get",
                "headers": [{
                    "key": "key",
                    "value": "value"
                }],
                "httpBody": null
            }],
            "text": {
                "text": ""
            }
        }
    },
    {
        "request": {
            "url": "",
            "method": "get",
            "headers": [{
                "key": "key",
                "value": "value"
            }],
            "httpBody": null
        },
        "extra": {
            "commands": [{
                "commandName": "",
                "params": [{
                    "key": "",
                    "value": ""
                }]
            }],
            "extraInfo": [{
                "key": "",
                "value": ""
            }]
        },
        "javascriptConfig": {
            "removeJavascript": true,
            "loadInWebView": false,
            "javaScript": "function Chapters(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output;}function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody;}function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo;}function Commands(commandName, params) { this.commandName = commandName; this.params = params;}function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript;}function KeyValue(key, value) { this.key = key; this.value = value;}function Output(videos, images, text) { this.videos = videos; this.images = images; this.text = text;}function Videos(needsResolver, rawVideo) { this.needsResolver = needsResolver; this.rawVideo = rawVideo;}function NeedsResolver(resolverIdentifier, link) { this.resolverIdentifier = resolverIdentifier; this.link = link;}function RawVideo(video) { this.video = video;}function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink;}function getValueFromKey(keys, key) { for (var x = 0; x < keys.length; x++) { let tKey = keys[x]; if (tKey.key == key) { return tKey.value; } }}var savedData = document.getElementById('ketsu-final-data');var parsedJson = JSON.parse(savedData.innerHTML);var extraInfo = parsedJson.extra.extraInfo;var emptyKeyValue = parsedJson.request.headers;var output = parsedJson.output.videos;var actualCount = getValueFromKey(extraInfo, 'count');var nextCount = parseInt(actualCount) + 1;var nextRequest = getValueFromKey(extraInfo, nextCount);if (actualCount == 0) { output = new Videos([], []);}var fixedLink = document.querySelector('iframe').src.replace('https://streamtape.com/', 'https://streamta.pe/').replace('https://viewsb.com', 'https://watchsb.com').replace('?ov-ignore=true','');if(!fixedLink.includes('https')){ fixedLink = 'https://' + fixedLink;}output.needsResolver.push(new NeedsResolver('', new ModuleRequest(fixedLink, 'get', emptyKeyValue, null)));extraInfo[0].value = '' + (nextCount);if (nextRequest == undefined) { nextRequest = '';}let emptyExtra = new Extra([new Commands('', emptyKeyValue)], extraInfo);var chaptersObject = new Chapters(new ModuleRequest(nextRequest, 'post', emptyKeyValue, parsedJson.request.httpBody), emptyExtra, new JavascriptConfig(true, false, ''), new Output(output, null, null));var finalJson = JSON.stringify(chaptersObject);savedData.innerHTML = finalJson;"
        },
        "output": {
            "videos": {
                "needsResolver": [{
                    "resolverIdentifier": "",
                    "link": {
                        "url": "",
                        "method": "get",
                        "headers": [{
                            "key": "key",
                            "value": "value"
                        }],
                        "httpBody": null
                    }
                }],
                "rawVideo": [{
                    "video": [{
                        "videoQuality": "",
                        "videoLink": {
                            "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                            "method": "get",
                            "headers": [{
                                "key": "key",
                                "value": "value"
                            }],
                            "httpBody": null
                        }
                    }]
                }]
            },
            "images": [{
                "url": "empty",
                "method": "get",
                "headers": [{
                    "key": "key",
                    "value": "value"
                }],
                "httpBody": null
            }],
            "text": {
                "text": ""
            }
        }
    }],
    "moduleResolvers": [{
        "resolverInfo": {
            "resolverName": "",
            "nameMatches": [
                ""
            ],
            "developer": "",
            "moduleID": "",
            "resolverVersion": 1,
            "baseURL": ""
        },
        "resolver": [{
            "request": {
                "url": "",
                "method": "get",
                "headers": [{
                    "key": "key",
                    "value": "value"
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": false,
                "loadInWebView": false,
                "javaScript": ""
            },
            "output": {
                "moduleID": "",
                "video": [{
                    "videoQuality": "720",
                    "videoLink": {
                        "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                        "method": "get",
                        "headers": [{
                            "key": "key",
                            "value": "value"
                        }],
                        "httpBody": null
                    }
                }]
            }
        }]
    },
    {
        "resolverInfo": {
          "resolverName": "VUPLOAD",
          "nameMatches": [
            "VUPLOAD"
          ],
          "developer": "ãƒŠãƒ“ãƒ«",
          "moduleID": "45656414564654456",
          "resolverVersion": 1.03,
          "baseURL": "https://vupload.com/"
        },
        "resolver": [
          {
            "request": {
              "url": "empty",
              "method": "get",
              "headers": [
                {
                  "key": "key",
                  "value": "value"
                }
              ],
              "httpBody": null
            },
            "extra": {
              "commands": [
                {
                  "commandName": "",
                  "params": [
                    {
                      "key": "",
                      "value": ""
                    }
                  ]
                }
              ],
              "extraInfo": [
                {
                  "key": "",
                  "value": ""
                }
              ]
            },
            "javascriptConfig": {
              "removeJavascript": true,
              "loadInWebView": false,
              "javaScript": " function Resolver(request, extra, javascriptConfig, output) { this.request = request; this.extra = extra; this.javascriptConfig = javascriptConfig; this.output = output; } function ModuleRequest(url, method, headers, httpBody) { this.url = url; this.method = method; this.headers = headers; this.httpBody = httpBody; } function Extra(commands, extraInfo) { this.commands = commands; this.extraInfo = extraInfo; } function Commands(commandName, params) { this.commandName = commandName; this.params = params; } function JavascriptConfig(removeJavascript, loadInWebView, javaScript) { this.removeJavascript = removeJavascript; this.loadInWebView = loadInWebView; this.javaScript = javaScript; } function KeyValue(key, value) { this.key = key; this.value = value; } function Output(video) { this.video = video; } function Video(videoQuality, videoLink) { this.videoQuality = videoQuality; this.videoLink = videoLink; } function getNext(match, array) { for (var x = 0; x < array.length; x++) { let mMatch = array[x]; if (mMatch.includes(match)) { return array[x + 1]; } } } var savedData = document.getElementById('ketsu-final-data'); var parsedJson = JSON.parse(savedData.innerHTML); var emptyKeyValue = [new KeyValue('Referer', parsedJson.request.url)]; var videos = []; var link = ''; let scripts = document.querySelectorAll('p'); for (script of scripts) { if (script.innerHTML.includes('sources')) { var content = script.innerHTML; link = content.match(/(http.*?\\.m3u8+)/gm)[0]; } } videos.push(new Video('normal', new ModuleRequest(link, 'get', emptyKeyValue, null))); let emptyExtra = new Extra([new Commands('', emptyKeyValue)], emptyKeyValue); var chaptersObject = new Resolver(new ModuleRequest('', 'get', emptyKeyValue, null), emptyExtra, new JavascriptConfig(false, false, ''), new Output(videos)); var finalJson = JSON.stringify(chaptersObject); savedData.innerHTML = finalJson;"
            },
            "output": {
              "moduleID": "",
              "video": [
                {
                  "videoQuality": "720",
                  "videoLink": {
                    "url": "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4",
                    "method": "get",
                    "headers": [
                      {
                        "key": "key",
                        "value": "value"
                      }
                    ],
                    "httpBody": null
                  }
                }
              ]
            }
          }
        ]
      }
    ],
    "responseCodeFunctions": [{
        "code": 0,
        "msgTitle": "",
        "msgBody": "",
        "type": "normal",
        "functions": [{
            "request": {
                "url": "empty",
                "method": "get",
                "headers": [{
                    "key": "key",
                    "value": "value"
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": ""
            }
        }]
    }],
    "helperFunctions": [{
        "functionName": "example",
        "msgTitle": "",
        "msgBody": "",
        "type": "normal",
        "functions": [{
            "request": {
                "url": "empty",
                "method": "get",
                "headers": [{
                    "key": "key",
                    "value": "value"
                }],
                "httpBody": null
            },
            "extra": {
                "commands": [{
                    "commandName": "",
                    "params": [{
                        "key": "",
                        "value": ""
                    }]
                }],
                "extraInfo": [{
                    "key": "",
                    "value": ""
                }]
            },
            "javascriptConfig": {
                "removeJavascript": true,
                "loadInWebView": false,
                "javaScript": ""
            }
        }]
    }]
}
 
